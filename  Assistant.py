{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78cb502b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Listening...\n",
      "You said: set a 10 second timer for me\n",
      "Listening...\n",
      "Sorry, I did not understand that.\n",
      "Listening...\n",
      "Sorry, I did not understand that.\n",
      "Listening...\n",
      "Sorry, I did not understand that.\n",
      "Listening...\n"
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "import pyttsx3\n",
    "import time\n",
    "from datetime import datetime\n",
    "import random\n",
    "\n",
    "# Initialize the recognizer and text-to-speech engine\n",
    "recognizer = sr.Recognizer()\n",
    "tts_engine = pyttsx3.init()\n",
    "\n",
    "def speak(text):\n",
    "    \"\"\"Convert text to speech\"\"\"\n",
    "    tts_engine.say(text)\n",
    "    tts_engine.runAndWait()\n",
    "\n",
    "def listen():\n",
    "    \"\"\"Listen for a voice command and convert it to text\"\"\"\n",
    "    with sr.Microphone() as source:\n",
    "        print(\"Listening...\")\n",
    "        recognizer.adjust_for_ambient_noise(source)\n",
    "        audio = recognizer.listen(source)\n",
    "        try:\n",
    "            command = recognizer.recognize_google(audio)\n",
    "            print(f\"You said: {command}\")\n",
    "            return command.lower()\n",
    "        except sr.UnknownValueError:\n",
    "            print(\"Sorry, I did not understand that.\")\n",
    "            speak(\"Sorry, I did not understand that.\")\n",
    "            return None\n",
    "        except sr.RequestError:\n",
    "            print(\"Sorry, my speech service is down.\")\n",
    "            speak(\"Sorry, my speech service is down.\")\n",
    "            return None\n",
    "\n",
    "def tell_joke():\n",
    "    \"\"\"Return a random joke\"\"\"\n",
    "    jokes = [\n",
    "        \"Why don't scientists trust atoms? Because they make up everything!\",\n",
    "        \"What do you get if you cross a snowman and a vampire? Frostbite.\",\n",
    "        \"Why was the math book sad? Because it had too many problems.\"\n",
    "    ]\n",
    "    return random.choice(jokes)\n",
    "\n",
    "def handle_command(command):\n",
    "    \"\"\"Handle the voice command\"\"\"\n",
    "    if command is None:\n",
    "        return\n",
    "    if \"hello\" in command:\n",
    "        speak(\"Hello! How can I help you today?\")\n",
    "    elif \"your name\" in command:\n",
    "        speak(\"My name is Alex, and I am your personal assistant.\")\n",
    "    elif \"time\" in command:\n",
    "        now = datetime.now().strftime(\"%H:%M\")\n",
    "        speak(f\"The current time is {now}\")\n",
    "    elif \"date\" in command:\n",
    "        today = datetime.now().strftime(\"%Y-%m-%d\")\n",
    "        speak(f\"Today's date is {today}\")\n",
    "    elif \"weather\" in command:\n",
    "        speak(\"The weather is pleasant today! Enjoy your day!\")\n",
    "    elif \"joke\" in command:\n",
    "        joke = tell_joke()\n",
    "        speak(joke)\n",
    "    elif \"timer\" in command:\n",
    "        speak(\"For how many seconds would you like to set the timer?\")\n",
    "        duration_command = listen()\n",
    "        if duration_command:\n",
    "            try:\n",
    "                duration = int(''.join(filter(str.isdigit, duration_command)))\n",
    "                speak(f\"Setting a timer for {duration} seconds.\")\n",
    "                time.sleep(duration)\n",
    "                speak(\"Time's up!\")\n",
    "            except ValueError:\n",
    "                speak(\"Sorry, I couldn't understand the duration. Please try again.\")\n",
    "    elif \"goodbye\" in command or \"exit\" in command or \"quit\" in command:\n",
    "        speak(\"Goodbye!\")\n",
    "        raise SystemExit\n",
    "    else:\n",
    "        speak(\"Sorry, I don't understand that command.\")\n",
    "\n",
    "def main():\n",
    "    speak(\"Hello! How can I help you today?\")\n",
    "    try:\n",
    "        while True:\n",
    "            command = listen()\n",
    "            handle_command(command)\n",
    "    except KeyboardInterrupt:\n",
    "        speak(\"Goodbye!\")\n",
    "    except SystemExit:\n",
    "        speak(\"Shutting down\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63ebb366",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
